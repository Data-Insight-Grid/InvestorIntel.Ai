name: InvestorIntel.Ai Testing

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        pip install fastapi httpx
        
    - name: Create mock environment variables for testing
      run: |
        echo "SUPABASE_URL=https://example.supabase.co" >> $GITHUB_ENV
        echo "SUPABASE_KEY=mock_key" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=dummy" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=dummy" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET_NAME=dummy" >> $GITHUB_ENV
        echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=dummy" >> $GITHUB_ENV
        echo "PINECONE_API_KEY=dummy" >> $GITHUB_ENV
        echo "SNOWFLAKE_USER=dummy" >> $GITHUB_ENV
        echo "SNOWFLAKE_PASSWORD=dummy" >> $GITHUB_ENV
        echo "SNOWFLAKE_ACCOUNT=dummy" >> $GITHUB_ENV
        echo "SNOWFLAKE_WAREHOUSE=dummy" >> $GITHUB_ENV
        echo "SNOWFLAKE_DATABASE=INVESTOR_INTEL_DB" >> $GITHUB_ENV
        echo "SNOWFLAKE_ROLE=dummy" >> $GITHUB_ENV
    
    - name: Create test data directory
      run: |
        mkdir -p backend/tests/test_data
        # Create a simple PDF file for testing
        echo "%PDF-1.5
        1 0 obj
        << /Type /Catalog /Pages 2 0 R >>
        endobj
        2 0 obj
        << /Type /Pages /Kids [3 0 R] /Count 1 >>
        endobj
        3 0 obj
        << /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R >>
        endobj
        4 0 obj
        << /Length 44 >>
        stream
        BT /F1 12 Tf 100 700 Td (Test PDF Document) Tj ET
        endstream
        endobj
        xref
        0 5
        0000000000 65535 f 
        0000000010 00000 n 
        0000000059 00000 n 
        0000000118 00000 n 
        0000000217 00000 n 
        trailer
        << /Size 5 /Root 1 0 R >>
        startxref
        308
        %%EOF" > backend/tests/test_data/sample_pitch_deck.pdf
      
    - name: Run unit tests
      env:
        SUPABASE_URL: https://example.supabase.co
        SUPABASE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3aXNqZWNuc3lvZ2VoYWZmcWpwIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NzI3MzgxMDYsImV4cCI6MTk4ODMxNDEwNn0.mock_key
        AWS_ACCESS_KEY_ID: dummy
        AWS_SECRET_ACCESS_KEY: dummy
        AWS_S3_BUCKET_NAME: dummy
        AWS_REGION: us-east-1
        GEMINI_API_KEY: dummy
        PINECONE_API_KEY: dummy
        SNOWFLAKE_USER: dummy
        SNOWFLAKE_PASSWORD: dummy
        SNOWFLAKE_ACCOUNT: dummy
        SNOWFLAKE_WAREHOUSE: dummy
        SNOWFLAKE_DATABASE: INVESTOR_INTEL_DB
        SNOWFLAKE_ROLE: dummy
      run: |
        cd backend
        pytest tests/unit_tests.py -v
        
    - name: Run integration tests
      env:
        SUPABASE_URL: https://example.supabase.co
        SUPABASE_KEY: mock_key
        AWS_ACCESS_KEY_ID: dummy
        AWS_SECRET_ACCESS_KEY: dummy
        AWS_S3_BUCKET_NAME: dummy
        AWS_REGION: us-east-1
        GEMINI_API_KEY: dummy
        PINECONE_API_KEY: dummy
        SNOWFLAKE_USER: dummy
        SNOWFLAKE_PASSWORD: dummy
        SNOWFLAKE_ACCOUNT: dummy
        SNOWFLAKE_WAREHOUSE: dummy
        SNOWFLAKE_DATABASE: INVESTOR_INTEL_DB
        SNOWFLAKE_ROLE: dummy
      run: |
        cd backend
        python -m pytest tests/integration_tests.py -v

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        
    - name: Run Bandit security scanner
      run: |
        bandit -r backend/ -f json -o bandit-results.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-results.json
        if-no-files-found: warn
